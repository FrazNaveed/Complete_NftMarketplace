{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\FYP Documentation\\\\Project101\\\\front\\\\src\\\\Components\\\\CreatePage\\\\Create.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport axios from \"axios\";\nimport \"./create.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Create = () => {\n  _s();\n\n  const maxSize = 12000000;\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [path, setPath] = useState(\"\");\n  const [mintMessage, setMintMessage] = useState(\"\");\n  const [mintMessageState, setMintMessageState] = useState(\"success\");\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [mintTitle, setTitle] = useState(\"\");\n  const [mintPrice, setPrice] = useState(0);\n  const [dexcription, setDexcription] = useState(\"\");\n\n  const onDrop = acceptedFile => {\n    if (acceptedFile.length == 0) {\n      alert(\"File size must be less than 12mb\");\n    } else {\n      setSelectedFile(acceptedFile);\n      setPath(acceptedFile[0].path.toString());\n      console.log(path);\n    }\n  };\n\n  const mintNFT = async e => {\n    e.preventDefault();\n    const {\n      ethereum\n    } = window;\n    const accounts = await ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    setWalletAddress(accounts[0]);\n    console.log(walletAddress);\n\n    if (mintTitle == \"\" || mintPrice == 0 || mintPrice == \"\" || dexcription == \"\" || selectedFile.length === 0) {\n      setMintMessage(\"One of the required fields were left empty. Please try again\");\n      setMintMessageState(\"error\");\n      return;\n    } // const formData = {\n    //   msgsender: walletAddress,\n    //   title: mintTitle,\n    //   price: mintPrice,\n    //   category: mintCategory,\n    //   description: dexcription,\n    // }\n\n\n    const formData = new FormData();\n    formData.append(\"msgsender\", walletAddress);\n    formData.append(\"title\", mintTitle);\n    formData.append(\"price\", mintPrice);\n    formData.append(\"description\", dexcription);\n    formData.append(\"media\", selectedFile[0]);\n    setMintMessage(\"Uploading your video NFT on IPFS\");\n    setMintMessageState(\"info\");\n    console.log(formData);\n    const response = await axios.post(`http://localhost:3000/mintNFT`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n\n    if (response.status == 200) {\n      setMintMessage(\"Sending transaction\");\n      setMintMessageState(\"info\");\n      var params = [{\n        from: walletAddress,\n        ...response.data.signRequired\n      }];\n      const signed = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params\n      });\n      setMintMessage(\"Transaction successfully sent, <a href='https://ropsten.etherscan.io/tx/\" + signed + \"' target='_blank'>view on etherescan</a>\");\n      setMintMessageState(\"success\");\n    } else {\n      setMintMessage(response.data.error);\n      setMintMessageState(\"error\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Create an NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(Dropzone, {\n          multiple: false,\n          onDrop: onDrop,\n          accept: \"video/*\",\n          maxSize: maxSize,\n          children: _ref => {\n            let {\n              getRootProps,\n              getInputProps,\n              isDragActive,\n              isDragReject\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropzone\",\n              ...getRootProps(),\n              children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 17\n              }, this), !isDragActive && \"Click here or drop a file to upload!\", isDragActive && !isDragReject && \"Drop it!\", isDragReject && \"File type not accepted, sorry!\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: path\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: Text,\n          placeholder: \"Title\",\n          onChange: e => {\n            setTitle(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: Text,\n          placeholder: \"Price\",\n          onChange: e => {\n            setPrice(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Description\",\n          onChange: e => {\n            setDexcription(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: mintNFT,\n          children: \"Mint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        children: mintMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Create, \"4rAq4hpUzJVe9kEEti9jt2caIRU=\");\n\n_c = Create;\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/FYP Documentation/Project101/front/src/Components/CreatePage/Create.js"],"names":["React","useEffect","useState","Dropzone","axios","Create","maxSize","selectedFile","setSelectedFile","path","setPath","mintMessage","setMintMessage","mintMessageState","setMintMessageState","walletAddress","setWalletAddress","mintTitle","setTitle","mintPrice","setPrice","dexcription","setDexcription","onDrop","acceptedFile","length","alert","toString","console","log","mintNFT","e","preventDefault","ethereum","window","accounts","request","method","formData","FormData","append","response","post","headers","status","params","from","data","signRequired","signed","error","getRootProps","getInputProps","isDragActive","isDragReject","Text","target","value"],"mappings":"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","sourcesContent":["import { React, useEffect, useState } from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport axios from \"axios\";\r\nimport \"./create.css\";\r\n\r\nconst Create = () => {\r\n  const maxSize = 12000000;\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [path, setPath] = useState(\"\");\r\n  const [mintMessage, setMintMessage] = useState(\"\");\r\n  const [mintMessageState, setMintMessageState] = useState(\"success\");\r\n\r\n  const [walletAddress, setWalletAddress] = useState(\"\");\r\n  const [mintTitle, setTitle] = useState(\"\");\r\n  const [mintPrice, setPrice] = useState(0);\r\n  const [dexcription, setDexcription] = useState(\"\");\r\n\r\n  const onDrop = (acceptedFile) => {\r\n    if (acceptedFile.length == 0) {\r\n      alert(\"File size must be less than 12mb\");\r\n    } else {\r\n      setSelectedFile(acceptedFile);\r\n      setPath((acceptedFile[0].path).toString());\r\n      console.log(path);\r\n    }\r\n  };\r\n\r\n\r\n  const mintNFT = async (e) => {\r\n    e.preventDefault();\r\n    const { ethereum } = window;\r\n    const accounts = await ethereum.request({\r\n      method: \"eth_requestAccounts\",\r\n    });\r\n    setWalletAddress(accounts[0]);\r\n    console.log(walletAddress); \r\n    if (\r\n      mintTitle == \"\" ||\r\n      mintPrice == 0 ||\r\n      mintPrice == \"\" ||\r\n      dexcription == \"\" || \r\n      selectedFile.length === 0\r\n    ) {\r\n      setMintMessage(\r\n        \"One of the required fields were left empty. Please try again\"\r\n      );\r\n      setMintMessageState(\"error\");\r\n      return;\r\n    }\r\n\r\n    // const formData = {\r\n    //   msgsender: walletAddress,\r\n    //   title: mintTitle,\r\n    //   price: mintPrice,\r\n    //   category: mintCategory,\r\n    //   description: dexcription,\r\n    // }\r\n    const formData = new FormData();\r\n    formData.append(\"msgsender\", walletAddress);\r\n    formData.append(\"title\", mintTitle);\r\n    formData.append(\"price\", mintPrice);\r\n    formData.append(\"description\", dexcription);\r\n    formData.append(\"media\", selectedFile[0]);\r\n\r\n    setMintMessage(\"Uploading your video NFT on IPFS\");\r\n    setMintMessageState(\"info\");\r\n    console.log(formData);\r\n\r\n    const response = await axios.post(\r\n      `http://localhost:3000/mintNFT`,\r\n      formData,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      }\r\n    );\r\n    if (response.status == 200) {\r\n      setMintMessage(\"Sending transaction\");\r\n      setMintMessageState(\"info\");\r\n      var params = [\r\n        {\r\n          from: walletAddress,\r\n          ...response.data.signRequired,\r\n        },\r\n      ];\r\n      const signed = await window.ethereum.request({\r\n        method: \"eth_sendTransaction\",\r\n        params,\r\n      });\r\n      setMintMessage(\r\n        \"Transaction successfully sent, <a href='https://ropsten.etherscan.io/tx/\" +\r\n          signed +\r\n          \"' target='_blank'>view on etherescan</a>\"\r\n      );\r\n      setMintMessageState(\"success\");\r\n    } else {\r\n      setMintMessage(response.data.error);\r\n      setMintMessageState(\"error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"background\">\r\n      <h1>Create an NFT</h1>\r\n      <form>\r\n        <Dropzone\r\n          multiple={false}\r\n          onDrop={onDrop}\r\n          accept=\"video/*\"\r\n          maxSize={maxSize}\r\n        >\r\n          {({ getRootProps, getInputProps, isDragActive, isDragReject }) => {\r\n            return (\r\n              <div className=\"dropzone\" {...getRootProps()}>\r\n                <input {...getInputProps()} />\r\n                {!isDragActive && \"Click here or drop a file to upload!\"}\r\n                {isDragActive && !isDragReject && \"Drop it!\"}\r\n                {isDragReject && \"File type not accepted, sorry!\"}\r\n              </div>\r\n            );\r\n          }}\r\n        </Dropzone>\r\n\r\n        <p>{path}</p>\r\n        <input type={Text} placeholder=\"Title\" onChange={(e)=>{setTitle(e.target.value)}}/>\r\n        <input type={Text} placeholder=\"Price\" onChange={(e)=>{setPrice(e.target.value)}} />\r\n        <textarea placeholder=\"Description\" onChange={(e)=>{setDexcription(e.target.value)}}></textarea>\r\n        <button onClick={mintNFT}>Mint</button>\r\n      </form>\r\n\r\n      <a>{mintMessage}</a>\r\n      {/* <p>{mintMessageState}</p> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Create;\r\n"]},"metadata":{},"sourceType":"module"}